#include <iostream>
#include <cstring>
using namespace std;

// Function to preprocess the pattern and compute the longest prefix suffix (LPS) array
void computeLPSArray(const char* pattern, int patternLength, int* lps) {
    int length = 0; // Length of the previous longest prefix suffix
    lps[0] = 0; // LPS value for the first character is always 0

    int i = 1;
    while (i < patternLength) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                // Go to the previous prefix suffix value
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Function to search the pattern in the given text using the KMP algorithm
void KMPSearch(const char* text, const char* pattern) {
    int textLength = strlen(text);
    int patternLength = strlen(pattern);

    // Create LPS array
    int lps[patternLength];
    computeLPSArray(pattern, patternLength, lps);

    int i = 0; // Index for text
    int j = 0; // Index for pattern

    bool found = false;
    while (i < textLength) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == patternLength) {
            cout << "Pattern found at index " << i - j << endl;
            j = lps[j - 1];
            found = true;
        } else if (i < textLength && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    if (!found) {
        cout << "Pattern not found in the text." << endl;
    }
}

int main() {
    char text[1000];
    char pattern[1000];

    cout << "Enter the text: ";
    cin.getline(text, 1000);

    cout << "Enter the pattern: ";
    cin.getline(pattern, 1000);

    KMPSearch(text, pattern);

    return 0;
}
