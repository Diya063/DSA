#include <iostream>
#include <cstdlib>  // for rand()
#include <ctime>    // for srand(time(0))

using namespace std;

// Global variable to count comparisons
int comparisons = 0;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to choose a random pivot and place it at the end
int partition(int arr[], int low, int high) {
    // Choose a random pivot and swap it with the last element
    int randomPivot = low + rand() % (high - low + 1);
    swap(arr[randomPivot], arr[high]);

    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        comparisons++;  // Count each comparison
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Recursive function for Randomized Quick Sort
void randomizedQuickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        randomizedQuickSort(arr, low, pi - 1);
        randomizedQuickSort(arr, pi + 1, high);
    }
}

int main() {
    srand(time(0)); // Initialize random seed

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    
    int arr[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    randomizedQuickSort(arr, 0, n - 1);

    cout << "\nSorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\nTotal comparisons: " << comparisons << endl;

    return 0;

//PRAC2
#include <iostream>
#include <cstdlib> // for rand()
#include <ctime>   // for srand(time(0))

using namespace std;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Partition function for Randomized Select
int partition(int arr[], int low, int high) {
    // Randomly choose a pivot and swap it with the last element
    int randomPivot = low + rand() % (high - low + 1);
    swap(arr[randomPivot], arr[high]);

    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Randomized Select function to find the ith smallest element
int randomizedSelect(int arr[], int low, int high, int i) {
    if (low == high) {
        return arr[low];
    }

    int pivotIndex = partition(arr, low, high);
    int k = pivotIndex - low + 1; // Number of elements in the left partition

    if (i == k) { // Pivot is the ith smallest element
        return arr[pivotIndex];
    } else if (i < k) { // Search in the left part
        return randomizedSelect(arr, low, pivotIndex - 1, i);
    } else { // Search in the right part
        return randomizedSelect(arr, pivotIndex + 1, high, i - k);
    }
}

int main() {
    srand(time(0)); // Initialize random seed

    int n, i;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements: ";
    for (int j = 0; j < n; j++) {
        cin >> arr[j];
    }

    cout << "Enter the value of i (to find the ith smallest element): ";
    cin >> i;

    if (i < 1 || i > n) {
        cout << "Invalid value of i. It should be between 1 and " << n << ".\n";
    } else {
        int result = randomizedSelect(arr, 0, n - 1, i);
        cout << "The " << i << "th smallest element is: " << result << endl;
    }

    return 0;
}

\\PRAC3
#include <iostream>

using namespace std;

// Class to represent an edge
class Edge {
public:
    int src, dest, weight;

    Edge() : src(0), dest(0), weight(0) {}
    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
};

// Disjoint Set Union (Union-Find) structure
class DSU {
private:
    int* parent;
    int* rank;

public:
    DSU(int size) {
        parent = new int[size];
        rank = new int[size];
        for (int i = 0; i < size; i++) {
            parent[i] = i; // Each node is its own parent initially
            rank[i] = 0;   // Rank is zero for all nodes initially
        }
    }

    ~DSU() {
        delete[] parent;
        delete[] rank;
    }

    // Find the representative of the set (with path compression)
    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]); // Path compression
        }
        return parent[u];
    }

    // Union of two sets
    void unite(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Manual sorting function (Bubble Sort) to sort edges by weight
void bubbleSortEdges(Edge* edges, int E) {
    for (int i = 0; i < E - 1; i++) {
        for (int j = 0; j < E - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}

// Function to implement Kruskal's Algorithm
void kruskalMST(int V, int E, Edge* edges) {
    // Sort edges by weight
    bubbleSortEdges(edges, E);

    DSU dsu(V);
    Edge* mst = new Edge[V - 1];
    int mstWeight = 0;
    int mstIndex = 0;

    for (int i = 0; i < E && mstIndex < V - 1; i++) {
        Edge edge = edges[i];
        int u = edge.src;
        int v = edge.dest;

        // Check if adding this edge forms a cycle
        if (dsu.find(u) != dsu.find(v)) {
            dsu.unite(u, v);
            mst[mstIndex++] = edge;
            mstWeight += edge.weight;
        }
    }

    // Display the MST
    cout << "Edges in the Minimum Spanning Tree:\n";
    for (int i = 0; i < mstIndex; i++) {
        cout << mst[i].src << " -- " << mst[i].dest << " == " << mst[i].weight << endl;
    }
    cout << "Total weight of MST: " << mstWeight << endl;

    delete[] mst;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Edge* edges = new Edge[E];
    cout << "Enter each edge (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        edges[i] = Edge(src, dest, weight);
    }

    kruskalMST(V, E, edges);

    delete[] edges;
    return 0;
}

\\PRAC4
#include <iostream>
#include <climits>

using namespace std;

class Edge {
public:
    int src, dest, weight;
    Edge(int s = 0, int d = 0, int w = 0) : src(s), dest(d), weight(w) {}
};

void bellmanFord(int V, int E, Edge edges[], int source) {
    // Step 1: Initialize distances from the source to all vertices as infinite
    int *dist = new int[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[source] = 0;

    // Step 2: Relax all edges |V| - 1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;

            // If the distance to u is not infinite and the distance to v can be minimized
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 3: Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int weight = edges[j].weight;

        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains a negative-weight cycle" << endl;
            delete[] dist;
            return;
        }
    }

    // Display the distances from the source
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << i << "\t" << "INF" << endl;
        else
            cout << i << "\t" << dist[i] << endl;
    }

    delete[] dist;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Edge *edges = new Edge[E];
    cout << "Enter each edge (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        edges[i] = Edge(src, dest, weight);
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    bellmanFord(V, E, edges, source);

    delete[] edges;
    return 0;
}

\\PRAC5

