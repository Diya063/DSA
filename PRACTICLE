#include <iostream>
#include <cstdlib>  // for rand()
#include <ctime>    // for srand(time(0))

using namespace std;

// Global variable to count comparisons
int comparisons = 0;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to choose a random pivot and place it at the end
int partition(int arr[], int low, int high) {
    // Choose a random pivot and swap it with the last element
    int randomPivot = low + rand() % (high - low + 1);
    swap(arr[randomPivot], arr[high]);

    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        comparisons++;  // Count each comparison
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Recursive function for Randomized Quick Sort
void randomizedQuickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        randomizedQuickSort(arr, low, pi - 1);
        randomizedQuickSort(arr, pi + 1, high);
    }
}

int main() {
    srand(time(0)); // Initialize random seed

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    
    int arr[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    randomizedQuickSort(arr, 0, n - 1);

    cout << "\nSorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\nTotal comparisons: " << comparisons << endl;

    return 0;

//PRAC2
#include <iostream>
#include <cstdlib> // for rand()
#include <ctime>   // for srand(time(0))

using namespace std;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Partition function for Randomized Select
int partition(int arr[], int low, int high) {
    // Randomly choose a pivot and swap it with the last element
    int randomPivot = low + rand() % (high - low + 1);
    swap(arr[randomPivot], arr[high]);

    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Randomized Select function to find the ith smallest element
int randomizedSelect(int arr[], int low, int high, int i) {
    if (low == high) {
        return arr[low];
    }

    int pivotIndex = partition(arr, low, high);
    int k = pivotIndex - low + 1; // Number of elements in the left partition

    if (i == k) { // Pivot is the ith smallest element
        return arr[pivotIndex];
    } else if (i < k) { // Search in the left part
        return randomizedSelect(arr, low, pivotIndex - 1, i);
    } else { // Search in the right part
        return randomizedSelect(arr, pivotIndex + 1, high, i - k);
    }
}

int main() {
    srand(time(0)); // Initialize random seed

    int n, i;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements: ";
    for (int j = 0; j < n; j++) {
        cin >> arr[j];
    }

    cout << "Enter the value of i (to find the ith smallest element): ";
    cin >> i;

    if (i < 1 || i > n) {
        cout << "Invalid value of i. It should be between 1 and " << n << ".\n";
    } else {
        int result = randomizedSelect(arr, 0, n - 1, i);
        cout << "The " << i << "th smallest element is: " << result << endl;
    }

    return 0;
}

\\PRAC3
#include <iostream>

using namespace std;

// Class to represent an edge
class Edge {
public:
    int src, dest, weight;

    Edge() : src(0), dest(0), weight(0) {}
    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
};

// Disjoint Set Union (Union-Find) structure
class DSU {
private:
    int* parent;
    int* rank;

public:
    DSU(int size) {
        parent = new int[size];
        rank = new int[size];
        for (int i = 0; i < size; i++) {
            parent[i] = i; // Each node is its own parent initially
            rank[i] = 0;   // Rank is zero for all nodes initially
        }
    }

    ~DSU() {
        delete[] parent;
        delete[] rank;
    }

    // Find the representative of the set (with path compression)
    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]); // Path compression
        }
        return parent[u];
    }

    // Union of two sets
    void unite(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Manual sorting function (Bubble Sort) to sort edges by weight
void bubbleSortEdges(Edge* edges, int E) {
    for (int i = 0; i < E - 1; i++) {
        for (int j = 0; j < E - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}

// Function to implement Kruskal's Algorithm
void kruskalMST(int V, int E, Edge* edges) {
    // Sort edges by weight
    bubbleSortEdges(edges, E);

    DSU dsu(V);
    Edge* mst = new Edge[V - 1];
    int mstWeight = 0;
    int mstIndex = 0;

    for (int i = 0; i < E && mstIndex < V - 1; i++) {
        Edge edge = edges[i];
        int u = edge.src;
        int v = edge.dest;

        // Check if adding this edge forms a cycle
        if (dsu.find(u) != dsu.find(v)) {
            dsu.unite(u, v);
            mst[mstIndex++] = edge;
            mstWeight += edge.weight;
        }
    }

    // Display the MST
    cout << "Edges in the Minimum Spanning Tree:\n";
    for (int i = 0; i < mstIndex; i++) {
        cout << mst[i].src << " -- " << mst[i].dest << " == " << mst[i].weight << endl;
    }
    cout << "Total weight of MST: " << mstWeight << endl;

    delete[] mst;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Edge* edges = new Edge[E];
    cout << "Enter each edge (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        edges[i] = Edge(src, dest, weight);
    }

    kruskalMST(V, E, edges);

    delete[] edges;
    return 0;
}

\\PRAC4
#include <iostream>
#include <climits>

using namespace std;

class Edge {
public:
    int src, dest, weight;
    Edge(int s = 0, int d = 0, int w = 0) : src(s), dest(d), weight(w) {}
};

void bellmanFord(int V, int E, Edge edges[], int source) {
    // Step 1: Initialize distances from the source to all vertices as infinite
    int *dist = new int[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[source] = 0;

    // Step 2: Relax all edges |V| - 1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;

            // If the distance to u is not infinite and the distance to v can be minimized
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 3: Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int weight = edges[j].weight;

        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains a negative-weight cycle" << endl;
            delete[] dist;
            return;
        }
    }

    // Display the distances from the source
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << i << "\t" << "INF" << endl;
        else
            cout << i << "\t" << dist[i] << endl;
    }

    delete[] dist;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Edge *edges = new Edge[E];
    cout << "Enter each edge (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        edges[i] = Edge(src, dest, weight);
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    bellmanFord(V, E, edges, source);

    delete[] edges;
    return 0;
}

\\PRAC5
#include <iostream>
using namespace std;

class BTreeNode {
private:
    int *keys;          // Array of keys
    int t;              // Minimum degree (defines range for the number of keys)
    BTreeNode **children; // Array of child pointers
    int n;              // Current number of keys
    bool isLeaf;        // True if the node is a leaf

public:
    BTreeNode(int t, bool isLeaf); // Constructor

    // Function to insert a new key when the node is not full
    void insertNonFull(int key);

    // Function to split a child of this node
    void splitChild(int i, BTreeNode *child);

    // Function to traverse and print the tree
    void traverse();

    // Grant BTree access to private members
    friend class BTree;
};

class BTree {
private:
    BTreeNode *root;    // Pointer to root node
    int t;              // Minimum degree

public:
    // Constructor for BTree
    BTree(int t) {
        root = nullptr;
        this->t = t;
    }

    // Traverse the tree
    void traverse() {
        if (root != nullptr) {
            root->traverse();
        }
    }

    // Insert a new key in the B-Tree
    void insert(int key);
};

// BTreeNode constructor
BTreeNode::BTreeNode(int t, bool isLeaf) {
    this->t = t;
    this->isLeaf = isLeaf;
    keys = new int[2 * t - 1];       // Maximum number of keys
    children = new BTreeNode *[2 * t]; // Maximum number of children
    n = 0; // Initial number of keys is 0
}

// Function to traverse and print the tree
void BTreeNode::traverse() {
    int i;
    for (i = 0; i < n; i++) {
        if (!isLeaf) {
            children[i]->traverse();
        }
        cout << keys[i] << " ";
    }

    if (!isLeaf) {
        children[i]->traverse();
    }
}

// Function to insert a new key in the B-Tree
void BTree::insert(int key) {
    if (root == nullptr) {
        root = new BTreeNode(t, true);
        root->keys[0] = key;
        root->n = 1;
    } else {
        if (root->n == 2 * t - 1) {
            BTreeNode *newRoot = new BTreeNode(t, false);
            newRoot->children[0] = root;
            newRoot->splitChild(0, root);

            int i = 0;
            if (newRoot->keys[0] < key) {
                i++;
            }
            newRoot->children[i]->insertNonFull(key);

            root = newRoot;
        } else {
            root->insertNonFull(key);
        }
    }
}

// Insert a key when the node is not full
void BTreeNode::insertNonFull(int key) {
    int i = n - 1;

    if (isLeaf) {
        while (i >= 0 && keys[i] > key) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = key;
        n = n + 1;
    } else {
        while (i >= 0 && keys[i] > key) {
            i--;
        }

        if (children[i + 1]->n == 2 * t - 1) {
            splitChild(i + 1, children[i + 1]);

            if (keys[i + 1] < key) {
                i++;
            }
        }
        children[i + 1]->insertNonFull(key);
    }
}

// Split the child node
void BTreeNode::splitChild(int i, BTreeNode *child) {
    BTreeNode *newNode = new BTreeNode(child->t, child->isLeaf);
    newNode->n = t - 1;

    for (int j = 0; j < t - 1; j++) {
        newNode->keys[j] = child->keys[j + t];
    }

    if (!child->isLeaf) {
        for (int j = 0; j < t; j++) {
            newNode->children[j] = child->children[j + t];
        }
    }

    child->n = t - 1;

    for (int j = n; j >= i + 1; j--) {
        children[j + 1] = children[j];
    }

    children[i + 1] = newNode;

    for (int j = n - 1; j >= i; j--) {
        keys[j + 1] = keys[j];
    }

    keys[i] = child->keys[t - 1];
    n = n + 1;
}

// Main function
int main() {
    int degree;
    cout << "Enter the minimum degree of the B-Tree: ";
    cin >> degree;
    BTree t(degree);

    int numElements, element;
    cout << "Enter the number of elements to insert: ";
    cin >> numElements;
    cout << "Enter the elements:\n";
    for (int i = 0; i < numElements; i++) {
        cin >> element;
        t.insert(element);
    }

    cout << "Traversal of the constructed B-Tree is:\n";
    t.traverse();

    return 0;
}

\\PRAC6
#include <iostream>
using namespace std;

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

class BinarySearchTree {
public:
    TreeNode* root;

    BinarySearchTree() {
        root = nullptr;
    }

    // Insert a node into the BST
    void insert(int value) {
        root = insertRecursive(root, value);
    }

    // Search for a value in the BST
    bool search(int value) {
        return searchRecursive(root, value);
    }

private:
    // Helper function for insertion (recursive)
    TreeNode* insertRecursive(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }
        if (value < node->data) {
            node->left = insertRecursive(node->left, value);
        } else if (value > node->data) {
            node->right = insertRecursive(node->right, value);
        }
        return node;
    }

    // Helper function for searching (recursive)
    bool searchRecursive(TreeNode* node, int value) {
        if (node == nullptr) {
            return false;
        }
        if (node->data == value) {
            return true;
        }
        if (value < node->data) {
            return searchRecursive(node->left, value);
        } else {
            return searchRecursive(node->right, value);
        }
    }
};

int main() {
    BinarySearchTree bst;
    int numElements, value;

    // Insert elements
    cout << "How many elements do you want to insert? ";
    cin >> numElements;
    cout << "Enter " << numElements << " elements:\n";
    for (int i = 0; i < numElements; i++) {
        cin >> value;
        bst.insert(value);
    }
    cout << "Elements have been inserted into the tree.\n";

    // Search phase
    char choice;
    do {
        cout << "\nEnter a value to search: ";
        cin >> value;
        if (bst.search(value)) {
            cout << value << " is found in the tree.\n";
        } else {
            cout << value << " is not found in the tree.\n";
        }
        cout << "Do you want to search for another value? (y/n): ";
        cin >> choice;
    } while (choice == 'y' || choice == 'Y');

    cout << "Exiting the program.\n";
    return 0;
}

\\PRAC7
#include <iostream>
#include <cstring>
using namespace std;

// Function to preprocess the pattern and compute the longest prefix suffix (LPS) array
void computeLPSArray(const char* pattern, int patternLength, int* lps) {
    int length = 0; // Length of the previous longest prefix suffix
    lps[0] = 0; // LPS value for the first character is always 0

    int i = 1;
    while (i < patternLength) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                // Go to the previous prefix suffix value
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Function to search the pattern in the given text using the KMP algorithm
void KMPSearch(const char* text, const char* pattern) {
    int textLength = strlen(text);
    int patternLength = strlen(pattern);

    // Create LPS array
    int lps[patternLength];
    computeLPSArray(pattern, patternLength, lps);

    int i = 0; // Index for text
    int j = 0; // Index for pattern

    bool found = false;
    while (i < textLength) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == patternLength) {
            cout << "Pattern found at index " << i - j << endl;
            j = lps[j - 1];
            found = true;
        } else if (i < textLength && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    if (!found) {
        cout << "Pattern not found in the text." << endl;
    }
}

int main() {
    char text[1000];
    char pattern[1000];

    cout << "Enter the text: ";
    cin.getline(text, 1000);

    cout << "Enter the pattern: ";
    cin.getline(pattern, 1000);

    KMPSearch(text, pattern);

    return 0;
}

\\PRAC8
#include <iostream>
using namespace std;

const int ALPHABET_SIZE = 26; // For lowercase letters
const int MAX_TEXT_SIZE = 100; // Maximum size of the input text

// Node class for the suffix tree
class Node {
public:
    Node* children[ALPHABET_SIZE];
    bool isEndOfWord;

    Node() {
        isEndOfWord = false;
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            children[i] = nullptr;
        }
    }

    ~Node() {
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            if (children[i] != nullptr) {
                delete children[i];
            }
        }
    }
};

// Suffix Tree class
class SuffixTree {
    Node* root;

public:
    SuffixTree() {
        root = new Node();
    }

    void insert(char text[], int start, int length) {
        Node* current = root;
        for (int i = start; i < length; i++) {
            int index = text[i] - 'a'; // Get index (0-25)
            if (index < 0 || index >= ALPHABET_SIZE) {
                continue; // Ignore non-alphabetic characters
            }

            if (current->children[index] == nullptr) {
                current->children[index] = new Node();
            }
            current = current->children[index];
        }
        current->isEndOfWord = true;
    }

    void buildTree(char text[], int length) {
        for (int i = 0; i < length; i++) {
            insert(text, i, length);
        }
    }

    bool search(char pattern[], int patternLength) {
        Node* current = root;
        for (int i = 0; i < patternLength; i++) {
            int index = pattern[i] - 'a';
            if (index < 0 || index >= ALPHABET_SIZE || current->children[index] == nullptr) {
                return false;
            }
            current = current->children[index];
        }
        return true;
    }

    ~SuffixTree() {
        delete root;
    }
};

int main() {
    char text[MAX_TEXT_SIZE];
    char pattern[MAX_TEXT_SIZE];

    cout << "Enter the text (lowercase letters only): ";
    cin >> text;

    // Calculate text length manually
    int textLength = 0;
    while (text[textLength] != '\0') {
        textLength++;
    }

    SuffixTree tree;
    tree.buildTree(text, textLength);

    cout << "Enter the pattern to search: ";
    cin >> pattern;

    // Calculate pattern length manually
    int patternLength = 0;
    while (pattern[patternLength] != '\0') {
        patternLength++;
    }

    if (tree.search(pattern, patternLength)) {
        cout << "Pattern found in the text!" << endl;
    } else {
        cout << "Pattern not found in the text." << endl;
    }

    return 0;
}
