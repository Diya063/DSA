#include <iostream>
#include <climits>

using namespace std;

class Edge {
public:
    int src, dest, weight;
    Edge(int s = 0, int d = 0, int w = 0) : src(s), dest(d), weight(w) {}
};

void bellmanFord(int V, int E, Edge edges[], int source) {
    // Step 1: Initialize distances from the source to all vertices as infinite
    int *dist = new int[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[source] = 0;

    // Step 2: Relax all edges |V| - 1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;

            // If the distance to u is not infinite and the distance to v can be minimized
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 3: Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int weight = edges[j].weight;

        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains a negative-weight cycle" << endl;
            delete[] dist;
            return;
        }
    }

    // Display the distances from the source
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << i << "\t" << "INF" << endl;
        else
            cout << i << "\t" << dist[i] << endl;
    }

    delete[] dist;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Edge *edges = new Edge[E];
    cout << "Enter each edge (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        edges[i] = Edge(src, dest, weight);
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    bellmanFord(V, E, edges, source);

    delete[] edges;
    return 0;
}
