#include <iostream>
using namespace std;

class BTreeNode {
private:
    int *keys;          // Array of keys
    int t;              // Minimum degree (defines range for the number of keys)
    BTreeNode **children; // Array of child pointers
    int n;              // Current number of keys
    bool isLeaf;        // True if the node is a leaf

public:
    BTreeNode(int t, bool isLeaf); // Constructor

    // Function to insert a new key when the node is not full
    void insertNonFull(int key);

    // Function to split a child of this node
    void splitChild(int i, BTreeNode *child);

    // Function to traverse and print the tree
    void traverse();

    // Grant BTree access to private members
    friend class BTree;
};

class BTree {
private:
    BTreeNode *root;    // Pointer to root node
    int t;              // Minimum degree

public:
    // Constructor for BTree
    BTree(int t) {
        root = nullptr;
        this->t = t;
    }

    // Traverse the tree
    void traverse() {
        if (root != nullptr) {
            root->traverse();
        }
    }

    // Insert a new key in the B-Tree
    void insert(int key);
};

// BTreeNode constructor
BTreeNode::BTreeNode(int t, bool isLeaf) {
    this->t = t;
    this->isLeaf = isLeaf;
    keys = new int[2 * t - 1];       // Maximum number of keys
    children = new BTreeNode *[2 * t]; // Maximum number of children
    n = 0; // Initial number of keys is 0
}

// Function to traverse and print the tree
void BTreeNode::traverse() {
    int i;
    for (i = 0; i < n; i++) {
        if (!isLeaf) {
            children[i]->traverse();
        }
        cout << keys[i] << " ";
    }

    if (!isLeaf) {
        children[i]->traverse();
    }
}

// Function to insert a new key in the B-Tree
void BTree::insert(int key) {
    if (root == nullptr) {
        root = new BTreeNode(t, true);
        root->keys[0] = key;
        root->n = 1;
    } else {
        if (root->n == 2 * t - 1) {
            BTreeNode *newRoot = new BTreeNode(t, false);
            newRoot->children[0] = root;
            newRoot->splitChild(0, root);

            int i = 0;
            if (newRoot->keys[0] < key) {
                i++;
            }
            newRoot->children[i]->insertNonFull(key);

            root = newRoot;
        } else {
            root->insertNonFull(key);
        }
    }
}

// Insert a key when the node is not full
void BTreeNode::insertNonFull(int key) {
    int i = n - 1;

    if (isLeaf) {
        while (i >= 0 && keys[i] > key) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = key;
        n = n + 1;
    } else {
        while (i >= 0 && keys[i] > key) {
            i--;
        }

        if (children[i + 1]->n == 2 * t - 1) {
            splitChild(i + 1, children[i + 1]);

            if (keys[i + 1] < key) {
                i++;
            }
        }
        children[i + 1]->insertNonFull(key);
    }
}

// Split the child node
void BTreeNode::splitChild(int i, BTreeNode *child) {
    BTreeNode *newNode = new BTreeNode(child->t, child->isLeaf);
    newNode->n = t - 1;

    for (int j = 0; j < t - 1; j++) {
        newNode->keys[j] = child->keys[j + t];
    }

    if (!child->isLeaf) {
        for (int j = 0; j < t; j++) {
            newNode->children[j] = child->children[j + t];
        }
    }

    child->n = t - 1;

    for (int j = n; j >= i + 1; j--) {
        children[j + 1] = children[j];
    }

    children[i + 1] = newNode;

    for (int j = n - 1; j >= i; j--) {
        keys[j + 1] = keys[j];
    }

    keys[i] = child->keys[t - 1];
    n = n + 1;
}

// Main function
int main() {
    int degree;
    cout << "Enter the minimum degree of the B-Tree: ";
    cin >> degree;
    BTree t(degree);

    int numElements, element;
    cout << "Enter the number of elements to insert: ";
    cin >> numElements;
    cout << "Enter the elements:\n";
    for (int i = 0; i < numElements; i++) {
        cin >> element;
        t.insert(element);
    }

    cout << "Traversal of the constructed B-Tree is:\n";
    t.traverse();

    return 0;
}
