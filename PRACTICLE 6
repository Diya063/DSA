#include <iostream>
using namespace std;

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

class BinarySearchTree {
public:
    TreeNode* root;

    BinarySearchTree() {
        root = nullptr;
    }

    // Insert a node into the BST
    void insert(int value) {
        root = insertRecursive(root, value);
    }

    // Search for a value in the BST
    bool search(int value) {
        return searchRecursive(root, value);
    }

private:
    // Helper function for insertion (recursive)
    TreeNode* insertRecursive(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }
        if (value < node->data) {
            node->left = insertRecursive(node->left, value);
        } else if (value > node->data) {
            node->right = insertRecursive(node->right, value);
        }
        return node;
    }

    // Helper function for searching (recursive)
    bool searchRecursive(TreeNode* node, int value) {
        if (node == nullptr) {
            return false;
        }
        if (node->data == value) {
            return true;
        }
        if (value < node->data) {
            return searchRecursive(node->left, value);
        } else {
            return searchRecursive(node->right, value);
        }
    }
};

int main() {
    BinarySearchTree bst;
    int numElements, value;

    // Insert elements
    cout << "How many elements do you want to insert? ";
    cin >> numElements;
    cout << "Enter " << numElements << " elements:\n";
    for (int i = 0; i < numElements; i++) {
        cin >> value;
        bst.insert(value);
    }
    cout << "Elements have been inserted into the tree.\n";

    // Search phase
    char choice;
    do {
        cout << "\nEnter a value to search: ";
        cin >> value;
        if (bst.search(value)) {
            cout << value << " is found in the tree.\n";
        } else {
            cout << value << " is not found in the tree.\n";
        }
        cout << "Do you want to search for another value? (y/n): ";
        cin >> choice;
    } while (choice == 'y' || choice == 'Y');

    cout << "Exiting the program.\n";
    return 0;
}
